{"version":3,"sources":["components/Result.jsx","components/TodoForm.jsx","App.js","serviceWorker.js","index.js"],"names":["Result","listItems","this","props","todo","map","list","index","className","key","onClick","deleteButton","Component","TodoForm","state","text","todos","deleteTodo","newTodo","filter","element","setState","handleChange","event","newText","target","value","console","log","handleSubmit","preventDefault","onSubmit","type","placeholder","onChange","input","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mNAuBeA,E,iLAnBD,IAAD,OACDC,EAAWC,KAAKC,MAAMC,KAAKC,IAAI,SAACC,EAAKC,GACrC,OACA,wBAAIC,UAAU,kBAAiBC,IAAKF,GAAQD,EAAK,4BAAQE,UAAU,sCAAuCE,QAAS,kBAAI,EAAKP,MAAMQ,aAAaL,KAA9F,WAGrD,OACI,0BAAME,UAAU,aAEZ,yBAAKA,UAAU,aAEjB,wBAAIA,UAAU,oBAAqBP,S,GAZ3BW,aCwDPC,E,2MAtDXC,MAAM,CACFC,KAAM,GACNC,MAAO,I,EAGXL,aAAa,SAACM,GACV,IAAIC,EAAS,EAAKJ,MAAME,MAAMG,OAAO,SAAAC,GACjC,OAAOA,IAAYH,IAIvB,EAAKI,SAAS,CACVL,MAAME,K,EAMdI,aAAa,SAACC,GACV,IAAIC,EAASD,EAAME,OAAOC,MAC1B,EAAKL,SAAS,CAACN,KAAKS,IACpBG,QAAQC,IAAI,OAAQJ,I,EAIxBK,aAAa,SAACN,GACVA,EAAMO,iBACN,EAAKT,SAAS,CACVL,MAAM,GAAD,mBAAM,EAAKF,MAAME,OAAjB,CAAwB,EAAKF,MAAMC,OACxCA,KAAM,M,wEAUV,OACI,6BACI,0BAAMgB,SAAW7B,KAAK2B,cAElB,2BAAOG,KAAK,OAAON,MAAOxB,KAAKY,MAAMC,KAAKkB,YAAY,iBAAiBC,SAAUhC,KAAKoB,eACtF,4BAAQd,UAAU,gCAAlB,QAGD,kBAAC,EAAD,CAAQJ,KAAMF,KAAKY,MAAME,MAAOmB,MAAOjC,KAAKY,MAAMC,KAAMJ,aAAcT,KAAKS,oB,GAhDvEC,aCeRwB,MAZf,WACE,OACE,yBAAK5B,UAAU,OAEb,sCACA,kBAAC,EAAD,QCAc6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.c58620c2.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\n\n class Result extends Component {\n    render() {\n        let listItems =this.props.todo.map((list,index)=>{\n            return(\n            <li className=\"list-group-item\"key={index}>{list}<button className=\"waves-effect waves-light btn newbtn\"  onClick={()=>this.props.deleteButton(list)}>undo</button></li>\n            )\n            });\n        return (\n            <main className=\"container\" >\n                {/* {this.props.input && <p>typing:{this.props.input}</p>} */}\n                <div className=\"todo-area\">\n                \n              <ul className=\"list-group  list\" >{listItems}</ul>\n              {/* <button onClick={()=>this.props.deleteButton}>x</button>   */}  \n              </div>\n            </main>\n        )\n    }\n}\n\nexport default Result\n","import React, { Component } from 'react'\nimport Result from './Result';\n\n\nclass TodoForm extends Component {\n    state={\n        text: '',\n        todos: []\n    }\n\n    deleteButton=(deleteTodo)=>{\n        let newTodo= this.state.todos.filter(element=>{\n            return element !== deleteTodo\n        });\n\n\n        this.setState({\n            todos:newTodo,\n        \n        })\n\n    }\n\n    handleChange=(event) =>{\n        let newText= event.target.value\n        this.setState({text:newText })\n        console.log('text', newText);\n\n    }\n\n    handleSubmit=(event) => {\n        event.preventDefault()\n        this.setState({\n            todos: [...this.state.todos, this.state.text],\n            text: ''\n       \n        })\n\n        \n    }\n\n    \n\n    render() {\n        return (\n            <div>\n                <form onSubmit= {this.handleSubmit}>\n\n                    <input type=\"text\" value={this.state.text}placeholder=\"type your list\" onChange={this.handleChange}></input>\n                    <button className=\"waves-effect waves-light btn\">Add</button>\n                    </form>\n\n                   <Result todo={this.state.todos} input={this.state.text} deleteButton={this.deleteButton} />                                \n            </div>\n            \n        )\n    \n        }\n    }\nexport default TodoForm\n","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport TodoForm from './components/TodoForm';\n\n\n\nfunction App() {\n  return(\n    <div className=\"App\">\n\n      <h1>ToDo's</h1>\n      <TodoForm />\n     \n     \n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}